// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CopyAndDownsampleTo
#pragma kernel MirrorInplace

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> Result;

Texture2D<float4> tex_in;

float4 color;

int N;



[numthreads(8,8,1)]
void Clear(uint3 id : SV_DispatchThreadID) {

   Result[id.xy] = color;
}

float4 SumColors(Texture2D<float4> tex, int2 xy, int ns) {
   float4 res = 0;
   float a = 0;
   for (int i = 0; i < ns; i++) {
      for (int j = 0; j < ns; j++) {
         float4 x = tex[xy + int2(i, j)];
         res += x * x.a;
         a += x.a;
      }
   }
   if (a > 0) res /= a;

   return res;
}

[numthreads(8,8,1)]
void CopyAndDownsampleTo(uint3 id : SV_DispatchThreadID) {
   int ns = N;
   Result[id.xy] = SumColors(tex_in, id.xy * ns, ns);
}

// Use half width kernel here.
[numthreads(8,8,1)]
void MirrorInplace(uint3 id : SV_DispatchThreadID) {

   int w = N;
   int2 p = id.xy;
   int2 op = int2(w - 1 - p.x, p.y);
   
   float4 a = Result[p];
   float4 b = Result[op];

   Result[op] = a;
   Result[p] = b;
   
}